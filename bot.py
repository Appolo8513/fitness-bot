import logging
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import asyncio

from handlers.plan import get_training_plan

API_TOKEN = '7274015743:AAF00b-IIWIeIJd0JxQTHLm-5RVIjSexLa4'#–Ω–µ —Å—Ç–æ–∏—Ç –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –≤ —Ç–µ–ª–µ –±–æ—Ç–∞ - –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# –ü–∞–º—è—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π
user_data = {}
current_exercise = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–ª–∞–Ω üóì")],
        [KeyboardButton(text="–ü—Ä–æ–≥—Ä–µ—Å—Å üìà")],
        [KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è üïò")],
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ"
)

plan_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ"
)

start_training_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π")],
        [KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ"
)

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä üèãÔ∏è\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å:",
        reply_markup=main_menu_keyboard
    )

@router.message(lambda msg: msg.text == "–ü–ª–∞–Ω üóì")
async def handle_plan(message: Message):
    await message.answer(get_training_plan(), parse_mode="Markdown", reply_markup=plan_keyboard)

@router.message(lambda msg: msg.text == "–ü—Ä–æ–≥—Ä–µ—Å—Å üìà")
async def handle_progress(message: Message):
    user_id = message.from_user.id
    total = user_data.get(user_id, 0)
    await message.answer(f"üìà –¢—ã –≤—Å–µ–≥–æ –ø–æ–¥—Ç—è–Ω—É–ª—Å—è: *{total}* —Ä–∞–∑", parse_mode="Markdown")

@router.message(lambda msg: msg.text == "–ò—Å—Ç–æ—Ä–∏—è üïò")
async def handle_history(message: Message):
    await message.answer("–ò—Å—Ç–æ—Ä–∏—è —Ç–≤–æ–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...")

# –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
@router.message(lambda msg: msg.text == "–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def start_training(message: Message):
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ? –ö–æ–≥–¥–∞ —Å–¥–µ–ª–∞–µ—à—å –ø–æ–¥—Ö–æ–¥, –Ω–∞–∂–º–∏ '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π'.",
        reply_markup=start_training_keyboard
    )
    # –ù–∞—á–∏–Ω–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    user_id = message.from_user.id
    current_exercise[user_id] = {'name': '–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è', 'reps': 0}

# –ö–æ–≥–¥–∞ –Ω–∞–∂–∏–º–∞–µ—Ç "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"
@router.message(lambda msg: msg.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π")
async def cmd_add(message: Message):
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ç—ã –ø–æ–¥—Ç—è–Ω—É–ª—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12):")

# –ö–æ–≥–¥–∞ –Ω–∞–∂–∏–º–∞–µ—Ç "–ó–∞–∫–æ–Ω—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"
@router.message(lambda msg: msg.text == "–ó–∞–∫–æ–Ω—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
async def finish_exercise(message: Message):
    user_id = message.from_user.id
    exercise = current_exercise.get(user_id)

    if exercise:
        await message.answer(
            f"–¢—ã –∑–∞–≤–µ—Ä—à–∏–ª —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ *{exercise['name']}* —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {exercise['reps']} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.",
            parse_mode="Markdown"
        )
        # –£–¥–∞–ª–∏–º —Ç–µ–∫—É—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏
        del current_exercise[user_id]
        await message.answer(
            "–¢—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=main_menu_keyboard
        )
    else:
        await message.answer("–¢—ã –Ω–µ –Ω–∞—á–∞–ª —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.")

# –ü—Ä–∏—ë–º —á–∏—Å–µ–ª –ø–æ—Å–ª–µ /add
@router.message(F.text.regexp(r"^\d+$"))
async def handle_pullups_input(message: Message):
    user_id = message.from_user.id
    count = int(message.text)

    if user_id not in user_data:
        user_data[user_id] = 0

    if user_id in current_exercise:
        current_exercise[user_id]['reps'] += count
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–∏–ª {count} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ. –í—Å–µ–≥–æ: {current_exercise[user_id]['reps']} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.")
    else:
        user_data[user_id] += count
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–∏–ª {count} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π. –í—Å–µ–≥–æ: {user_data[user_id]} üí™")

# –ó–∞–ø—É—Å–∫
async def main():
    dp.include_router(router)
    await bot.delete_webhook()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
